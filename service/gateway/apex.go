package gateway

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"net"
	"time"

	"github.com/coredns/coredns/plugin/pkg/dnsutil"
	"github.com/coredns/coredns/request"
	"github.com/k8gb-io/coredns-crd-plugin/common/k8sctrl"
	"github.com/k8gb-io/coredns-crd-plugin/common/netutils"

	"github.com/miekg/dns"
)

// serveApex serves request that hit the zone' apex. A reply is written back to the client.
func (gw *Gateway) serveApex(state request.Request) int {
	m := new(dns.Msg)
	m.SetReply(state.Req)
	switch state.QType() {
	case dns.TypeSOA:
		m.Answer = []dns.RR{gw.soa(state)}
		m.Ns = gw.ns(state) // This fixes some of the picky DNS resolvers
	case dns.TypeNS:
		// get the NS records
		m.Answer = gw.ns(state)

		// get the glue records
		glueName := dnsutil.Join(gw.opts.hostname, state.Zone)
		ep := k8sctrl.Resources.DNSEndpoint.Lookup(glueName, net.ParseIP(state.IP()), "")
		for _, target := range ep.Targets {
			header := dns.RR_Header{Name: glueName, Rrtype: dns.TypeA, Ttl: gw.opts.ttlHigh, Class: dns.ClassINET}
			rr := &dns.A{Hdr: header, A: net.ParseIP(target)}
			m.Extra = append(m.Extra, rr)
		}

	default:
		m.Ns = []dns.RR{gw.soa(state)}
	}

	if err := state.W.WriteMsg(m); err != nil {
		log.Errorf("Failed to send a response: %s", err)
	}
	return 0
}

// serveSubApex serves A records for the server's hostname
func (gw *Gateway) serveSubApex(state request.Request) int {
	m := new(dns.Msg)
	m.SetReply(state.Req)

	name := dnsutil.Join(gw.opts.hostname, state.Zone)
	ep := k8sctrl.Resources.DNSEndpoint.Lookup(name, net.ParseIP(state.IP()), "")
	m.Answer = gw.A(state, netutils.TargetToIP(ep.Targets), ep.TTL)

	if err := state.W.WriteMsg(m); err != nil {
		log.Errorf("Failed to send a response: %s", err)
	}
	return 0
}

func (gw *Gateway) soa(state request.Request) *dns.SOA {
	header := dns.RR_Header{Name: state.Zone, Rrtype: dns.TypeSOA, Ttl: gw.opts.ttlHigh, Class: dns.ClassINET}

	soa := &dns.SOA{Hdr: header,
		Mbox:    dnsutil.Join(gw.opts.hostmaster, gw.opts.apex, state.Zone),
		Ns:      dnsutil.Join("ns1", gw.opts.apex, state.Zone),
		Serial:  uint32(time.Now().Truncate(time.Hour).Unix()),
		Refresh: 7200,
		Retry:   1800,
		Expire:  86400,
		Minttl:  gw.opts.ttlHigh,
	}
	return soa
}

func (gw *Gateway) ns(state request.Request) []dns.RR {
	rr := []dns.RR{}
	header := dns.RR_Header{Name: state.Zone, Rrtype: dns.TypeNS, Ttl: gw.opts.ttlHigh, Class: dns.ClassINET}

	ep := k8sctrl.Resources.DNSEndpoint.Lookup(state.QName(), net.ParseIP(state.IP()), "")
	for _, target := range ep.Targets {
		rr = append(rr, &dns.NS{Hdr: header, Ns: target})
	}

	return rr
}
